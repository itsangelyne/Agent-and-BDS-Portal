@page "/ShortTerm/Spendinglist"
@using Agent_and_BDS_Portal.Data
@using Agent_and_BDS_Portal.Model
@using System.Globalization
@inject CGL_Insured_Services insuredServices
@inject CGL_CreditDebit_Services creditdebitServices

<h3><strong>Pending</strong></h3>

<div class="container mt-0">
    <div class="border my-4 p-4 rounded" style="background-color: #ffff; box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);">
        <h3 class="text-center font-weight-bold"><strong>SHORT TERM</strong></h3>

        <!-- Search and Filter -->
        <div class="input-group mb-3 shadow-sm">
            <span class="input-group-text bg-light">🔍</span>
            <input type="text" @bind="searchQuery" class="form-control" style="max-width: 500px; margin-right: 10px;" placeholder="Search..." />
            <span class="input-group-text bg-light">Filter By:</span>
            <select @bind="selectedFilter" class="form-select" style="max-width: 500px; margin-right: 10px;">
                <option value="date"></option>
                <option value="2024">2024</option>
                <option value="2025">2025</option>
                <option value="2026">2026</option>
            </select>
        </div>

        <!-- Table -->
        <div class="mt-4 table-responsive">
            <table class="table table-bordered table-hover">
                <thead style="background-color: #77B254;">
                    <tr>
                        <th class="text-center text-white" style="cursor: pointer;" @onclick="ToggleSortOrder">
                            Release Date <i class="bi @(isDescending ? "bi-arrow-down" : "bi-arrow-up")"></i>
                        </th>
                        <th class="text-center text-white">Gross</th>
                        <th class="text-center text-white">Net</th>
                        <th class="text-center text-white">Total Application</th>
                        <th class="text-center text-white">Action</th>
                    </tr>
                </thead>
                <tbody>
                    @if (!pagedList.Any())
                    {
                        <tr>
                            <td colspan="5" class="text-center">No data available.</td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var creditdebit in pagedList)
                        {
                            <tr>
                                <td class="hover-cell text-center">@creditdebit.Submitted_Date.ToString("MM/dd/yyyy")</td>
                                <td class="hover-cell text-center">@creditdebit.Gross_Pay</td>
                                <td class="hover-cell text-center">@creditdebit.Net_Pay</td>
                                <td class="hover-cell text-center">@creditdebit.Total_Application</td>
                                <td class="text-center">
                                    <button class="btn btn-outline-success btn-sm" @onclick="() => ToggleDetails(creditdebit.DCHS_To)">
                                        View Application
                                    </button>
                                </td>
                            </tr>

                            @if (SelectedDCHS == creditdebit.DCHS_To)
                            {
                                var matchedInsuredList = InsuredObj
                                .Where(i => (i.DCHS == creditdebit.DCHS_To || i.DCHS == creditdebit.DCHS_From) && i.Type == "Short Term")
                                .ToList();

                                <tr>
                                    <td colspan="5">
                                        <div class="p-3 border rounded bg-light">
                                            <h5 class="text-center"><strong>Insured Individuals</strong></h5>
                                            <table class="table table-bordered">
                                                <thead class="table-success">
                                                    <tr>
                                                        <th class="text-center">ID Insured</th>
                                                        <th class="text-center">Full Name</th>
                                                        <th class="text-center">Age</th>
                                                        <th class="text-center">Gender</th>
                                                        <th class="text-center">Type</th>
                                                        <th class="text-center">Action</th>
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @if (!matchedInsuredList.Any())
                                                    {
                                                        <tr>
                                                            <td colspan="6" class="text-center">No insured data available.</td>
                                                        </tr>
                                                    }
                                                    else
                                                    {
                                                        @foreach (var insured in matchedInsuredList)
                                                        {
                                                            <tr>
                                                                <td class="text-center">@insured.ID_Insured</td>
                                                                <td class="text-center">@insured.First_Name @insured.Last_Name</td>
                                                                <td class="text-center">@insured.Age</td>
                                                                <td class="text-center">@insured.Gender</td>
                                                                <td class="text-center">@insured.Type</td>
                                                                <td class="text-center">
                                                                    <button class="btn btn-outline-success btn-sm" @onclick="() => OpenModal(insured)">
                                                                        View
                                                                    </button>
                                                                </td>
                                                            </tr>
                                                        }
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                    }
                </tbody>
            </table>
        </div>
        {
        <div class="modal fade show d-block" style="background: rgba(0, 0, 0, 0.5);" tabindex="-1">
            <div class="modal-dialog modal-xl">
                <div class="modal-content">
                    <div class="modal-header bg-success text-white">
                        <h5 class="modal-title">Insured Details</h5>
                        <button type="button" class="btn-close" @onclick="CloseModal"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label"><strong>ID Insured</strong></label>
                            <input type="text" class="form-control" value="@selectedInsured?.ID_Insured" readonly />
                        </div>
                        <div class="mb-3">
                            <label class="form-label"><strong>Full Name</strong></label>
                            <input type="text" class="form-control" value="@($"{selectedInsured?.First_Name} {selectedInsured?.Last_Name}")" readonly />
                        </div>
                        <div class="mb-3">
                            <label class="form-label"><strong>Age</strong></label>
                            <input type="text" class="form-control" value="@selectedInsured?.Age" readonly />
                        </div>
                        <div class="mb-3">
                            <label class="form-label"><strong>Gender</strong></label>
                            <input type="text" class="form-control" value="@selectedInsured?.Gender" readonly />
                        </div>
                        <div class="mb-3">
                            <label class="form-label"><strong>Type</strong></label>
                            <input type="text" class="form-control" value="@selectedInsured?.Type" readonly />
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-danger" @onclick="CloseModal">Close</button>
                    </div>
                </div>
            </div>
        </div>
        }


        <!-- Pagination -->
        <div class="d-flex justify-content-between align-items-center my-3">
            <button class="btn btn-outline-success px-4" @onclick="PreviousPage" disabled="@(currentPage == 1)">Previous</button>
            <strong>Page @currentPage of @totalPages</strong>
            <button class="btn btn-outline-success px-4" @onclick="NextPage" disabled="@(currentPage == totalPages)">Next</button>
        </div>
    </div>
</div>

@code {

    private bool showModal = false;
    private CGL_Insured selectedInsured = new CGL_Insured();

    private void OpenModal(CGL_Insured insured)
    {
        selectedInsured = insured;
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private string selectedFilter = "date";
    private string searchQuery = string.Empty;
    private List<CGL_CreditDebit> CreditdebitObj { get; set; } = new List<CGL_CreditDebit>();
    private List<CGL_Insured> InsuredObj { get; set; } = new List<CGL_Insured>();

    private int page = 5; // Number of items per page
    private int currentPage = 1;
    private int totalPages => (int)Math.Ceiling((double)filteredList.Count / page);
    private bool isDescending = true;

    private List<CGL_CreditDebit> filteredList
        => (CreditdebitObj?
            .Where(p => string.IsNullOrEmpty(searchQuery) ||
                (DateTime.TryParseExact(searchQuery, new[] { "MM/dd/yyyy", "yyyy/dd/MM" },
                    CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime searchDate)
                    && p.Submitted_Date.Date == searchDate.Date) ||
                (searchQuery.All(char.IsDigit) && int.TryParse(searchQuery, out int totalApplication) && p.Total_Application == totalApplication))
            .OrderBy(p => isDescending ? -p.Submitted_Date.Ticks : p.Submitted_Date.Ticks)
            .ToList()) ?? new List<CGL_CreditDebit>();

    private List<CGL_CreditDebit> pagedList => filteredList.Skip((currentPage - 1) * page).Take(page).ToList();

    private string? SelectedDCHS = null;

    protected override async Task OnInitializedAsync()
    {
        var creditDebitList = await creditdebitServices.GetAllCGL_CreditDebitAsync() ?? new List<CGL_CreditDebit>();
        var insuredList = await insuredServices.GetAllCGL_INSUREDAsync() ?? new List<CGL_Insured>();

        InsuredObj = insuredList.Where(x => x.Type?.Equals("Short Term", StringComparison.OrdinalIgnoreCase) == true).ToList();

        CreditdebitObj = (from cd in creditDebitList
                          join ins in insuredList on cd.DCHS_To equals ins.DCHS
                          where ins.Type == "Short Term"
                          select new CGL_CreditDebit
                              {
                                  Submitted_Date = cd.Submitted_Date,
                                  Gross_Pay = cd.Gross_Pay,
                                  Net_Pay = cd.Net_Pay,
                                  Total_Application = cd.Total_Application,
                                  DCHS_To = cd.DCHS_To
                              }).ToList();
    }

    private void ToggleDetails(string dchsNumber) => SelectedDCHS = (SelectedDCHS == dchsNumber) ? null : dchsNumber;

    private void ToggleSortOrder() => isDescending = !isDescending;
    private void NextPage() { if (currentPage < totalPages) currentPage++; }
    private void PreviousPage() { if (currentPage > 1) currentPage--; }
}
