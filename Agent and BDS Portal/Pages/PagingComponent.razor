@code {
    [Parameter] public int TotalItems { get; set; }
    [Parameter] public int ItemsPerPage { get; set; }
    [Parameter] public int CurrentPage { get; set; }
    [Parameter] public EventCallback<int> OnPageChange { get; set; }

    private int TotalPages => (int)Math.Ceiling(TotalItems / (double)ItemsPerPage);

    private void HandlePageChange(int pageNumber)
    {
        if (pageNumber < 1 || pageNumber > TotalPages)
            return;

        OnPageChange.InvokeAsync(pageNumber);
    }
}

<div class="pagination-container">
    <button @onclick="() => HandlePageChange(CurrentPage - 1)" disabled="@((CurrentPage == 1))">Previous</button>
    @for (var i = 1; i <= TotalPages; i++)
    {
        <button @onclick="() => HandlePageChange(i)" class="@(i == CurrentPage ? "active" : "")">@i</button>
    }
    <button @onclick="() => HandlePageChange(CurrentPage + 1)" disabled="@((CurrentPage == TotalPages))">Next</button>
</div>

<style>
    .active {
        font-weight: bold;
    }

    .pagination-container button {
        margin: 2px;
    }
</style>
