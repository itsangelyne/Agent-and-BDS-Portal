@page "/LongTerm/Lterminated"
@using Agent_and_BDS_Portal.Data
@using Agent_and_BDS_Portal.Context
@using Agent_and_BDS_Portal.Model
@using System.Globalization
@inject NavigationManager Navigation
@inject CGL_Insured_Services insuredServices
@inject CGL_Coverage_Services coverageServices
@inject CGL_CreditDebit_Services creditdebitServices


<h3><strong>LONG TERM</strong></h3>

<div class="container mt-0">
    <div class="border my-4 p-4 rounded" style="background-color: #ffff; box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);">
        <h3 class="text-center font-weight-bold"><strong>TERMINATION</strong></h3>
        <h5 class="text-center font-weight-bold"><strong><u>CBLIC</u></strong></h5>

        <!-- Search and Filter -->
        <div class="d-flex justify-content-between align-items-center mb-3">
            <!-- Search Box -->
            <div class="input-group" style="max-width: 800px;">
                <span class="input-group-text bg-light">🔍</span>
                <input type="text" @bind="searchQuery" class="form-control" placeholder="Search..." />
            </div>

            <!-- Filter Dropdown -->
            <div class="d-flex align-items-center">
                <span class="input-group-text bg-light">Filter By:</span>
                <select @bind="selectedFilter" class="form-select" style="max-width: 200px;">
                    <option value="">All</option>
                    <option value="2024">2024</option>
                    <option value="2025">2025</option>
                    <option value="2026">2026</option>
                    <option value="2027">2027</option>
                    <option value="2030">2030</option>
                </select>
            </div>
        </div>

        <!-- Table -->
        <div class="mt-4 table-responsive">
            <table class="table table-bordered table-hover">
                <thead style="background-color: #77B254;">
                    <tr>
                        <th class="text-center text-white" style="cursor: pointer;" @onclick="ToggleSortOrder">
                            Termination Date <i class="bi @(isDescending ? "bi-arrow-down" : "bi-arrow-up")"></i>
                        </th>
                        <th class="text-center text-white">Amount of Insured</th>
                        <th class="text-center text-white">Term of Loan</th>
                        <th class="text-center text-white">Total Application</th>
                        <th class="text-center text-white">Action</th>
                    </tr>
                </thead>
                <tbody>
                    @if (!filteredList.Any())
                    {
                        <tr>
                            <td colspan="5" class="text-center">No coverage data available.</td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var item in filteredList)
                        {
                            <tr>
                                <td class="text-center">@item.Termination_Date.ToString("MM/dd/yyyy")</td>
                                <td class="text-center">@item.Amount_Of_Insured.ToString("F2")</td>
                                <td class="text-center">@item.Term_Of_Loan</td>
                                <td class="text-center">@GetTerminatedApplications(item.Termination_Date)</td>
                                <td class="text-center">
                                    <button class="btn btn-outline-success btn-sm">View</button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Pagination -->
<div class="d-flex justify-content-between align-items-center my-3">
    <button class="btn btn-outline-success px-4" @onclick="PreviousPage" disabled="@(currentPage == 1)">Previous</button>
    <strong>Page @currentPage of @totalPages</strong>
    <button class="btn btn-outline-success px-4" @onclick="NextPage" disabled="@(currentPage == totalPages)">Next</button>
</div>

@code {
    private List<CGL_Coverage> pageList = new();
    private List<CGL_CreditDebit> pagedList = new();
    private string searchQuery = string.Empty;
    private string selectedFilter = string.Empty;
    private bool isDescending = true;
    private int page = 5; // Items per page
    private int currentPage = 1;
    private int totalPages => (int)Math.Ceiling((double)pageList.Count / page);
    private int totalTerminatedApplications = 0; // Variable to store total applications

    protected override async Task OnInitializedAsync()
    {
        await LoadCoverageData();
        
    }

    private async Task LoadCoverageData()
    {
        try
        {
            var insuredList = await insuredServices.GetAllINSUREDAsync() ?? new();
            var coverageList = await coverageServices.GetAllCGL_CoverageAsync() ?? new();
            var creditDebitList = await creditdebitServices.GetAllCGL_CreditDebitAsync() ?? new();

            // Filter for Long-Term insured individuals
            var insuredObj = insuredList.Where(x => x.Type?.Equals("Long Term", StringComparison.OrdinalIgnoreCase) == true).ToList();

            // Get corresponding coverage data
            pageList = coverageList
                .Where(c => insuredObj.Any(i => i.ID_Insured == c.ID_Insured))
                .ToList();
            pagedList = creditDebitList
               .Where(c => insuredObj.Any(i => i.DCHS == c.DCHS_From))
               .ToList();

            pagedList = creditDebitList
                  .Where(c => insuredObj.Any(i => i.DCHS == c.DCHS_From))
                  .ToList();
            totalTerminatedApplications = creditDebitList
             .Where(cd => pageList.Any(c => cd.Period_From == c.Termination_Date && cd.Period_To == c.Termination_Date))
             .Sum(cd => cd.Total_Application);

            // Calculate total applications
           
            Console.WriteLine($"Coverage Data Count: {pageList.Count}");
            // Console.WriteLine($"Total Applications: {totalApplications}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading coverage data: {ex.Message}");
        }
    }



    private void ToggleSortOrder()
    {
        isDescending = !isDescending;
        pageList = isDescending
            ? pageList.OrderByDescending(x => x.Termination_Date).ToList()
            : pageList.OrderBy(x => x.Termination_Date).ToList();
    }

    private List<CGL_Coverage> filteredList
        => pageList
            .Where(x => string.IsNullOrEmpty(searchQuery) || x.ID_Insured.ToString().Contains(searchQuery))
            .Where(x => string.IsNullOrEmpty(selectedFilter) || x.Termination_Date.Year.ToString() == selectedFilter)
            .Skip((currentPage - 1) * page)
            .Take(page)
            .ToList();

    private void NextPage()
    {
        if (currentPage < totalPages)
            currentPage++;
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
            currentPage--;
    }
    private int GetTerminatedApplications(DateTime releaseDate)
    {
        return pagedList
            .Where(cd => cd.Period_From == releaseDate)
            .Sum(cd => cd.Total_Application);

}
}
