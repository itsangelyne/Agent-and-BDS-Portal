@page "/LongTerm/Lcompliance"
@using Agent_and_BDS_Portal.Data
@using Agent_and_BDS_Portal.Context
@using Agent_and_BDS_Portal.Model
@using System.Globalization
@inject CGL_Insured_Services insuredServices
@inject CGL_Insured_Status_Services insuredstatusServices
@inject CGL_Substandard_Rating_Services substandardstatusServices
@inject CGL_CreditDebit_Services creditdebitServices
@inject CGL_Coverage_Services coverageServices
@inject CGL_Policy_Holder_Services policyholderServices
@inject CGL_Health_Question_Services healthquestionServices

<h3><strong>LONG TERM</strong></h3>

<div class="container mt-0">
    <div class="border my-4 p-4 rounded" style="background-color: #ffff; box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);">
        <h3 class="text-center font-weight-bold"><strong>COMPLIANCE</strong></h3>

        <!-- Search and Filter -->
        <div class="input-group mb-3 shadow-sm">
            <span class="input-group-text bg-light" @bind="searchQuery">🔍</span>
            <input type="text" @bind="searchQuery" class="form-control" style="max-width: 500px; margin-right: 10px;" placeholder="Search..." />
            <span class="input-group-text bg-light">Filter By:</span>
            <select @bind="selectedFilter" class="form-select" style="max-width: 500px; margin-right: 10px;">
                <option value="date"></option>
                <option value="2024">2024</option>
                <option value="2025">2025</option>
                <option value="2026">2026</option>
            </select>
        </div>

      
            @* /*Table * *@
        <div class="mt-4 table-responsive">
            <table class="table table-bordered table-hover">
                <thead style="background-color: #77B254;">
                    <tr>
                        <th class="text-center text-white" style="cursor: pointer;" @onclick="ToggleSortOrder">
                            Bank Name <i class="bi @(isDescending ? "bi-arrow-down" : "bi-arrow-up")"></i>
                        </th>
                        <th class="text-center text-white">Full Name</th>
                        <th class="text-center text-white">Application Status</th>
                        <th class="text-center text-white">Action</th>
                    </tr>
                </thead>
                <tbody>
                    @if (!pagedList.Any())
                    {
                        <tr>
                            <td colspan="4" class="text-center">No data available.</td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var insured in pagedList)
                        {
                            <tr>
                                <td class="hover-cell text-center">CBLIC</td>
                                <td class="hover-cell text-center">Ange</td>
                                 <td class="text-center">For checking</td> 
                                <td class="text-center">
                                    <button class="btn btn-outline-success btn-sm" @onclick="() => ToggleDetails(insured.DCHS_To)">
                                        View Application
                                    </button>
                                </td>
                            </tr>
                            @if (SelectedDCHS == insured.DCHS_To)
                            {
                                // Fetch matched insured individuals based on DCHS_To or DCHS_From
                                var matchedInsuredList = InsuredObj
                                .Where(i => (i.DCHS == insured.DCHS_To || i.DCHS == insured.DCHS_From) && i.Type == "Long Term")
                                .ToList();
                            }
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Pagination -->
        <div class="d-flex justify-content-between align-items-center my-3">
            <button class="btn btn-outline-success px-4" @onclick="PreviousPage" disabled="@(currentPage == 1)">Previous</button>
            <strong>Page @currentPage of @totalPages</strong>
            <button class="btn btn-outline-success px-4" @onclick="NextPage" disabled="@(currentPage == totalPages)">Next</button>
        </div>
  

@code {


    private bool showModal = false;
    private CGL_Insured selectedInsured = null;
    private CGL_Coverage selectedCoverage = null;
    private CGL_Policy_Holder selectedPolicyHolder = null;

    private void OpenModal(CGL_Insured insured, CGL_Coverage coverage)
    {
        selectedInsured = insured;
        selectedCoverage = coverage;
        showModal = true;
    }


    private void CloseModal()
    {
        selectedInsured = null;
        selectedCoverage = null;
        showModal = false;
    }

    private string selectedFilter = "date";
    private string searchQuery = string.Empty;
    private List<CGL_CreditDebit> CreditdebitObj { get; set; } = new List<CGL_CreditDebit>();
    private List<CGL_Insured> InsuredObj { get; set; } = new List<CGL_Insured>();
    private List<CGL_Coverage> CoverageObj { get; set; } = new List<CGL_Coverage>();
    private List<CGL_Policy_Holder> PolicyHolderObj { get; set; } = new List<CGL_Policy_Holder>();
    private List<CGL_Health_Question> HealthQuestionObj { get; set; } = new List<CGL_Health_Question>();

    private int page = 5; // Number of items per page
    private int currentPage = 1;
    private int totalPages => (int)Math.Ceiling((double)filteredList.Count / page);
    private bool isDescending = true;

    private List<CGL_CreditDebit> filteredList
    => (CreditdebitObj?
    .Where(p => string.IsNullOrEmpty(searchQuery) ||
    (DateTime.TryParseExact(searchQuery, new[] { "MM/dd/yyyy", "yyyy/dd/MM" },
    CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime searchDate)
    && p.Submitted_Date.Date == searchDate.Date) ||
    (searchQuery.All(char.IsDigit) && int.TryParse(searchQuery, out int totalApplication) && p.Total_Application == totalApplication))
    .OrderBy(p => isDescending ? -p.Submitted_Date.Ticks : p.Submitted_Date.Ticks)
    .ToList()) ?? new List<CGL_CreditDebit>();

    private List<CGL_CreditDebit> pagedList => filteredList.Skip((currentPage - 1) * page).Take(page).ToList();

    private string? SelectedDCHS = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var creditDebitList = await creditdebitServices.GetAllCGL_CreditDebitAsync() ?? new List<CGL_CreditDebit>();
            var insuredList = await insuredServices.GetAllINSUREDAsync() ?? new List<CGL_Insured>();
            var coverageList = await coverageServices.GetAllCGL_CoverageAsync() ?? new List<CGL_Coverage>();
            var policyholderList = await policyholderServices.GetAllPolicyHolderAsync() ?? new List<CGL_Policy_Holder>();
            var healthquestionList = await healthquestionServices.GetAllCGL_Health_QuestionAsync() ?? new List<CGL_Health_Question>();

            // Initialize InsuredObj
            InsuredObj = insuredList.Where(x => x.Type?.Equals("Long Term", StringComparison.OrdinalIgnoreCase) == true).ToList();

            // Populate CoverageObj
            CoverageObj = coverageList
            .Where(c => InsuredObj.Any(i => i.ID_Insured == c.ID_Insured))
            .ToList();

            // Populate PolicyHolderObj
            PolicyHolderObj = policyholderList
            .Where(p => InsuredObj.Any(i => i.ID_Policy_Holder == p.ID_Policy_Holder))
            .ToList();
            CreditdebitObj = creditDebitList
            .Where(p => creditDebitList.Any(i => i.Total_Application == p.Total_Application))
            .ToList();
            HealthQuestionObj = healthquestionList
            .Where(p => healthquestionList.Any(i => i.ID == p.ID))
            .ToList();

            // Populate CreditdebitObj
            CreditdebitObj = (from cd in creditDebitList
                              join ins in InsuredObj on cd.DCHS_To equals ins.DCHS
                              where ins.Type == "Long Term"
                              select new CGL_CreditDebit
                                  {
                                      Submitted_Date = cd.Submitted_Date,
                                      Gross_Pay = cd.Gross_Pay,
                                      Net_Pay = cd.Net_Pay,
                                      Total_Application = cd.Total_Application,
                                      DCHS_To = cd.DCHS_To,
                                      Total_Coverage = CoverageObj
                                  .Where(c => c.ID_Insured == ins.ID_Insured)
                                  .Sum(c => c.Amount_Of_Insured)
                                  }).ToList();

            // Debugging statements
            Console.WriteLine($"Insured Count: {InsuredObj.Count}");
            Console.WriteLine($"Coverage Count: {CoverageObj.Count}");
            Console.WriteLine($"Policy Holder Count: {PolicyHolderObj.Count}");
            Console.WriteLine($"Credit Debit Count: {CreditdebitObj.Count}");
        }
        catch (Exception ex)
        {
            // Log the error
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    private void ToggleDetails(string dchsNumber) => SelectedDCHS = (SelectedDCHS == dchsNumber) ? null : dchsNumber;

    private void ToggleSortOrder() => isDescending = !isDescending;
    private void NextPage() { if (currentPage < totalPages) currentPage++; }
    private void PreviousPage() { if (currentPage > 1) currentPage--; }
    }
