@page "/LongTerm/Lreceipted"
@using Agent_and_BDS_Portal.Data
@using Agent_and_BDS_Portal.Model
@using System.Globalization
@inject NavigationManager Navigation
@inject CGL_Insured_Services insuredServices
@inject CGL_CreditDebit_Services creditdebitServices
@inject CGL_Coverage_Services coverageServices
@inject CGL_Policy_Holder_Services policyholderServices
@inject CGL_Beneficiary_Services beneficiaryServices
@inject ImageService ImageService

@inject CGL_Receipted_Services receiptedServices

<h3><Strong>LONG TERM</Strong></h3>


<div class="container mt-0">
	<!-- Unified Border -->
	<div class="border my-4 p-4 rounded" style="background-color: #ffff; box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);">

		<h3 class="text-center font-weight-bold"><strong>RECEIPTED</strong></h3>
		<h5 class="text-center font-weight-bold"><strong><u>Bank Name: CBLIC</u></strong></h5>

		<!-- Search Bar -->
		<div class="d-flex justify-content-between align-items-center mb-3" style="max-width: 300%;">
			<!-- Search Box -->
			<div class="d-flex justify-content-between align-items-center mb-3" style="max-width: 500%;">
				<!-- Search Box -->
				<div class="input-group" style="max-width: 900px;">
					<span class="input-group-text bg-light" style="height: 40px;">🔍</span>
					<input type="text" @bind="searchQuery" class="form-control"
						   style="height: 40px;" placeholder="Search..." />
				</div>
			</div>

            <div class="d-flex align-items-center">
                <span class="input-group-text bg-light" style="height: 40px;">Bank:</span>
                <select @bind="selectedFilter" class="form-select"
                        style="max-width: 800px; height: 40px;">
                    <option value="date"></option>
                    <option value="2024">CBLIC BANK (QC)</option>
                    <option value="2025">CBLIC BANK</option>
                   
                </select>
            </div>
        

			<div class="d-flex align-items-center">
				<span class="input-group-text bg-light" style="height: 40px;">Filter By:</span>
				<select @bind="selectedFilter" class="form-select"
						style="max-width: 200px; height: 40px;">
					<option value="date"></option>
					<option value="2024">2024</option>
					<option value="2025">2025</option>
					<option value="2026">2026</option>
				</select>
			</div>
		</div>

		<!-- Table -->
		<div class="mt-4 table-responsive">
			<table class="table table-bordered table-hover">
				<thead style="background-color: #77B254;">
					<tr>
                        <th class="text-center text-white">OR Number</th>
                        <th class="text-center text-white" style="cursor: pointer;" @onclick="ToggleSortOrder">
                            OR Date <i class="bi @(isDescending ? "bi-arrow-down" : "bi-arrow-up")"></i>
                        </th>
                        <th class="text-center text-white">Total Application</th>
                        <th class="text-center text-white">Action</th>
						
					</tr>
				</thead>
                <tbody>
                    @if (!pagedList.Any())
                    {
                        <tr>
                            <td colspan="6" class="text-center">No data available.</td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var creditdebit in pagedList)
                        {
                            <tr>
                                <td class="hover-cell text-center">233486</td>
								<td class="hover-cell text-center">@creditdebit.Submitted_Date.ToString("MM/dd/yyyy")</td>
                                <td class="hover-cell text-center">@creditdebit.Total_Application</td>
                                <td class="text-center">
                                    <button class="btn btn-outline-success btn-sm">
                                        View Application
                                    </button>
                                </td>
                            </tr>            
                            
                        }
                    }
                </tbody>
            </table>
        </div>
	</div>
</div>






@code {

	private string selectedFilter = "date";
	private string searchQuery = string.Empty;
	private bool showModal = false;
	private CGL_Insured selectedInsured;
	

	private List<CGL_CreditDebit> CreditdebitObj { get; set; } = new List<CGL_CreditDebit>();
	private List<CGL_Insured> InsuredObj { get; set; } = new List<CGL_Insured>();
	private List<CGL_Coverage> CoverageObj { get; set; } = new List<CGL_Coverage>();
	private List<CGL_Policy_Holder> PolicyHolderObj { get; set; } = new List<CGL_Policy_Holder>();
	private List<CGL_Beneficiary> BeneficiaryObj { get; set; } = new List<CGL_Beneficiary>();



    private int page = 5; // Number of items per page
    private int currentPage = 1;
    private int totalPages => (int)Math.Ceiling((double)filteredList.Count / page);
    private bool isDescending = true;

	private List<CGL_CreditDebit> filteredList
	=> (CreditdebitObj?
	.Where(p => string.IsNullOrEmpty(searchQuery) ||
	(DateTime.TryParseExact(searchQuery, new[] { "MM/dd/yyyy", "yyyy/dd/MM" },
	CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime searchDate)
	&& p.Submitted_Date.Date == searchDate.Date) ||
	(searchQuery.All(char.IsDigit) && int.TryParse(searchQuery, out int totalApplication) && p.Total_Application == totalApplication))
	.OrderBy(p => isDescending ? -p.Submitted_Date.Ticks : p.Submitted_Date.Ticks)
	.ToList()) ?? new List<CGL_CreditDebit>();


    private List<CGL_CreditDebit> pagedList => filteredList.Skip((currentPage - 1) * page).Take(page).ToList();

    private string? SelectedDCHS = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var creditDebitList = await creditdebitServices.GetAllCGL_CreditDebitAsync() ?? new List<CGL_CreditDebit>();
            var insuredList = await insuredServices.GetAllINSUREDAsync() ?? new List<CGL_Insured>();
            var coverageList = await coverageServices.GetAllCGL_CoverageAsync() ?? new List<CGL_Coverage>();
            var policyholderList = await policyholderServices.GetAllPolicyHolderAsync() ?? new List<CGL_Policy_Holder>();
            var beneficiaryList = await beneficiaryServices.GetAllBeneficiaryAsync() ?? new List<CGL_Beneficiary>();
            // var filteredBeneficiaries = beneficiaryList
            // .Where(b => b.ID_Insured == selectedInsured?.ID_Insured)
            // .ToList();


            // Initialize InsuredObj
            InsuredObj = insuredList.Where(x => x.Type?.Equals("Long Term", StringComparison.OrdinalIgnoreCase) == true).ToList();

            // Populate CoverageObj
            CoverageObj = coverageList
            .Where(c => InsuredObj.Any(i => i.ID_Insured == c.ID_Insured))
            .ToList();

            BeneficiaryObj = beneficiaryList
           .Where(c => BeneficiaryObj.Any(i => i.ID_Insured == c.ID_Insured))
           .ToList();

            // Populate PolicyHolderObj
            PolicyHolderObj = policyholderList
            .Where(p => InsuredObj.Any(i => i.ID_Policy_Holder == p.ID_Policy_Holder))
            .ToList();
            CreditdebitObj = creditDebitList
            .Where(p => creditDebitList.Any(i => i.Total_Application == p.Total_Application))
            .ToList();


            CreditdebitObj = (from cd in creditDebitList
                              join ins in InsuredObj on cd.DCHS_To equals ins.DCHS
                              join Beneficiary in InsuredObj on cd.DCHS_To equals Beneficiary.DCHS
                              where ins.Type == "Long Term"
                              select new CGL_CreditDebit
                                  {
                                      Submitted_Date = cd.Submitted_Date,
                                      Gross_Pay = cd.Gross_Pay,
                                      Net_Pay = cd.Net_Pay,
                                      Total_Application = cd.Total_Application,
                                      DCHS_From = cd.DCHS_From,
                                      DCHS_To = cd.DCHS_To,
                                      Total_Coverage = CoverageObj
                                      .Where(c => c.ID_Insured == ins.ID_Insured)
                                      .Sum(c => c.Amount_Of_Insured)
                                  }).ToList();

            // Debugging statements
            Console.WriteLine($"Insured Count: {InsuredObj.Count}");
            Console.WriteLine($"Coverage Count: {CoverageObj.Count}");
            Console.WriteLine($"Policy Holder Count: {PolicyHolderObj.Count}");
            Console.WriteLine($"Credit Debit Count: {CreditdebitObj.Count}");

        }
        catch (Exception ex)
        {
            // Log the error
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }
	private void ToggleDetails(string dchsNumber) => SelectedDCHS = (SelectedDCHS == dchsNumber) ? null : dchsNumber;
	private void ToggleSortOrder() => isDescending = !isDescending;
	private void NextPage() { if (currentPage < totalPages) currentPage++; }
	private void PreviousPage() { if (currentPage > 1) currentPage--; }
}
