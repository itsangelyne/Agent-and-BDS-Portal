@page "/LongTerm/Lreceipted"
@using Agent_and_BDS_Portal.Data
@using Agent_and_BDS_Portal.Model
@using System.Globalization
@inject CGL_Receipted_Services receiptedServices

<h3><Strong>LONG TERM</Strong></h3>


<div class="container mt-0">
	<!-- Unified Border -->
	<div class="border my-4 p-4 rounded" style="background-color: #ffff; box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);">

		<h3 class="text-center font-weight-bold"><strong>RECEIPTED</strong></h3>
		<h5 class="text-center font-weight-bold"><strong><u>Bank Name: CBLIC</u></strong></h5>

		<!-- Search Bar -->
		<div class="input-group mb-3 shadow-sm">
			<span class="input-group-text bg-light">🔍</span>
			<input type="text" @bind="searchQuery" class="form-control" placeholder="Search..." />
		</div>
		<!-- Table -->
		<div class="mt-4 table-responsive">
			<table class="table table-bordered table-hover">
				<thead style="background-color: #77B254;">
					<tr>
						<th style="color:white;">OR Number</th>
						<th style="color:white;">OR Date</th>
						<th style="color:white;">Total Application</th>
						<th style="color:white;">Image</th>
						
					</tr>
				</thead>
				<tbody>
					@if (!pagedList.Any())
					{
						<tr>
							<td colspan="6" class="text-center">No data available.</td>
						</tr>
					}
					else
					{
						@foreach (var creditDebit in pagedList)
						{
							var insured = InsuredObj.FirstOrDefault(i => i.DCHS == creditDebit.DCHS_To);
							var policyholder = PolicyHolderObj.FirstOrDefault(p => p.ID_Policy_Holder == insured?.ID_Policy_Holder);
							var insuredStatus = Insured_StatusObj.FirstOrDefault(s => s.ID_Insured == insured?.ID_Insured);

							<tr>
								<td class="text-center">87632</td>
								<td class="text-center">@creditDebit.Submitted_Date.ToString("yyyy-MM-dd")</td>
								
								<td class="text-center">@creditDebit.Total_Application</td>
							
								<td class="text-center">
									<button class="btn btn-outline-success btn-sm" @onclick="() => OpenModal(insured)">View</button>
								</td>
							</tr>
						}
					}
				</tbody>

			</table>
		</div>
	</div>
</div>






@code {
	private bool showModal = false;
	private CGL_Insured selectedInsured;
	private string searchQuery = string.Empty;

	private List<CGL_CreditDebit> CreditdebitObj = new();
	private List<CGL_Insured> InsuredObj = new();
	private List<CGL_Policy_Holder> PolicyHolderObj = new();
	private List<CGL_Insured_Status> Insured_StatusObj = new();

	private int currentPage = 1;
	private const int pageSize = 5;
	private int totalPages => (int)Math.Ceiling((double)filteredList.Count / pageSize);

	private List<CGL_CreditDebit> filteredList => CreditdebitObj?
		.Where(p =>
			Insured_StatusObj.Any(s => s.ID_Insured == InsuredObj.FirstOrDefault(i => i.DCHS == p.DCHS_To)?.ID_Insured) &&
			(string.IsNullOrEmpty(searchQuery) ||
			(DateTime.TryParseExact(searchQuery, new[] { "MM/dd/yyyy", "yyyy/dd/MM" }, CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime searchDate)
			&& p.Submitted_Date.Date == searchDate.Date) ||
			(int.TryParse(searchQuery, out int totalApplication) && p.Total_Application == totalApplication)))
		.OrderByDescending(p => p.Submitted_Date)
		.ToList() ?? new List<CGL_CreditDebit>();

	private List<CGL_CreditDebit> pagedList => filteredList.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();

	protected override async Task OnInitializedAsync()
	{
		try
		{
			// CreditdebitObj = await creditdebitServices.GetAllCGL_CreditDebitAsync() ?? new List<CGL_CreditDebit>();
			// InsuredObj = (await insuredServices.GetAllINSUREDAsync() ?? new List<CGL_Insured>())
			// 	.Where(x => x.Type?.Equals("Long Term", StringComparison.OrdinalIgnoreCase) == true).ToList();
			// PolicyHolderObj = await policyholderServices.GetAllPolicyHolderAsync() ?? new List<CGL_Policy_Holder>();
			// Insured_StatusObj = (await insuredstatusServices.GetAllInsuredStatusAsync() ?? new List<CGL_Insured_Status>());




		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error loading data: {ex.Message}");
		}
	}

	private void OpenModal(CGL_Insured insured) => selectedInsured = insured;
	private void NextPage() { if (currentPage < totalPages) currentPage++; }
	private void PreviousPage() { if (currentPage > 1) currentPage--; }
}
