@page "/cgldashboard"
@using Agent_and_BDS_Portal.Data

@using BChart = Blazorise.Charts.ChartType
@inject NavigationManager NavigationManager
@layout MainLayout

<h3>Summary Report</h3>
<div class="container mt-3">
    <!-- Unified Border -->
    <div class="border p-4" style="background-color: #eaf5e5; border-radius: 9px;">
        <div class="row">
            <!-- PRODUCTION -->
            <div class="col-xs-4 col-lg-3">
                <div class="card text-white bg-primary mb-0" style="border-radius: 9px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);">
                    <div class="card-body text-center">
                        <a href="/summaryreport" class="text-white"><h1>@PRODUCTION</h1></a>
                        <p>Production</p>
                    </div>
                </div>
            </div>

            <!-- CLAIMS PAID -->
            <div class="col-xs-4 col-lg-3">
                <div class="card text-white bg-primary mb-3" style="border-radius: 9px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);">
                    <div class="card-body text-center">
                        <h1>@CLAIMSPAID</h1>
                        <p>Claims Paid</p>
                    </div>
                </div>
            </div>

            <!-- LOSS RATIO -->
            <div class="col-xs-4 col-lg-3">
                <div class="card text-white bg-primary mb-3" style="border-radius: 9px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);">
                    <div class="card-body text-center">
                        <h1>@LOSSRATIO</h1>
                        <p>Loss Ratio</p>
                    </div>
                </div>
            </div>

            <!-- NET INCOME -->
            <div class="col-xs-4 col-lg-3">
                <div class="card text-white bg-primary mb-3" style="border-radius: 9px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);">
                    <div class="card-body text-center">
                        <a href="/submitted" class="text-white"><h1>@NETINCOME</h1></a>
                        <p>Net Income</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<div class="container mt-2">
    <div class="border p-4" style="background-color: #eaf5e5; border-radius: 9px;">
        <h4>Production Charts</h4>
        <div class="d-flex flex-wrap" style="gap: 10px;">
            <div class="chart-container" style="width: 48%; background-color: #f9f9f9;">
                <BarChart @ref="topProducerChart" TItem="double" style="width: 100%; height: 350px;" />
            </div>
            <div class="chart-container" style="width: 48%; background-color: #f9f9f9;">
                <BarChart @ref="totalProductionChart" TItem="double" style="width: 100%; height: 350px;" />
            </div>
            <div class="chart-container" style="width: 48%; background-color: #f9f9f9;">
                <LineChart @ref="comparisonChart" TItem="double" style="width: 100%; height: 350px;" />
            </div>
            <div class="chart-container" style="width: 48%; background-color: #f9f9f9;">
                <BarChart @ref="productionChart" TItem="double" style="width: 100%; height: 350px;" />
            </div>
        </div>
    </div>
</div>

@code {
    private int PRODUCTION = 150;
    private int CLAIMSPAID = 150;
    private int LOSSRATIO = 150;
    private int NETINCOME = 180;
    private BarChart<double>? topProducerChart;
    private BarChart<double>? totalProductionChart;
    private LineChart<double>? comparisonChart;
    private BarChart<double>? productionChart;

    private Blazorise.Charts.ChartOptions chartOptions = new()
        {
            Responsive = true,
            MaintainAspectRatio = false
        };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await UpdateCharts();
        }
    }

    async Task UpdateCharts()
    {
        await topProducerChart.Clear();
        await topProducerChart.AddLabelsDatasetsAndUpdate(Labels, GetTopProducerDataset());

        await totalProductionChart.Clear();
        await totalProductionChart.AddLabelsDatasetsAndUpdate(Labels, GetTotalProductionDataset());

        await comparisonChart.Clear();
        await comparisonChart.AddLabelsDatasetsAndUpdate(Labels, GetComparisonDataset());

        await productionChart.Clear();
        await productionChart.AddLabelsDatasetsAndUpdate(Labels, GetProductionDataset());
    }

    private BarChartDataset<double> GetTopProducerDataset() => new()
        {
            Label = "Top Producer",
            Data = GetRandomData(),
            BackgroundColor = backgroundColors,
            BorderColor = borderColors
        };

    private BarChartDataset<double> GetTotalProductionDataset() => new()
        {
            Label = "Total Production",
            Data = GetRandomData(),
            BackgroundColor = backgroundColors,
            BorderColor = borderColors
        };

    private LineChartDataset<double> GetComparisonDataset() => new()
        {
            Label = "2024 vs 2025",
            Data = GetRandomData(),
            BackgroundColor = backgroundColors,
            BorderColor = borderColors
        };

    private BarChartDataset<double> GetProductionDataset() => new()
        {
            Label = "Production",
            Data = GetRandomData(),
            BackgroundColor = backgroundColors,
            BorderColor = borderColors
        };

    string[] Labels = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };
    List<string> backgroundColors = new() { "rgba(255,99,132,0.2)", "rgba(54,162,235,0.2)" };
    List<string> borderColors = new() { "rgba(255,99,132,1)", "rgba(54,162,235,1)" };

    private List<double> GetRandomData()
    {
        var r = new Random();
        return Labels.Select(_ => (double)r.Next(50, 200)).ToList();
    }
}
