@page "/cgldashboard"
@using Agent_and_BDS_Portal.Data
@using Agent_and_BDS_Portal.Context
@using Agent_and_BDS_Portal.Model
@using BChart = Blazorise.Charts.ChartType
@using MChart = MudBlazor.ChartType
@inject CGL_Policy_Holder_Services policyholderServices
@inject NavigationManager NavigationManager
@layout MainLayout

<h3><strong>Dashboard</strong></h3><hr />
<div class="container mt-3">
	<!-- Unified Border -->
	<div class="border p-4" style="background-color: #eaf5e5; border-radius: 9px;">
		<div class="row">
			<!-- PRODUCTION -->
			<div class="col-xs-4 col-lg-3">
				<div class="card text-white bg-primary mb-0" style="border-radius: 9px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);">
					<div class="card-body text-center">
						<a href="/summaryreport" class="text-white"><h1>@PRODUCTION</h1></a>
						<p>Production</p>
					</div>
				</div>
			</div>

			<!-- CLAIMS PAID -->
			<div class="col-xs-4 col-lg-3">
				<div class="card text-white bg-primary mb-3" style="border-radius: 9px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);">
					<div class="card-body text-center">
						<h1>@CLAIMSPAID</h1>
						<p>Claims Paid</p>
					</div>
				</div>
			</div>

			<!-- LOSS RATIO -->
			<div class="col-xs-4 col-lg-3">
				<div class="card text-white bg-primary mb-3" style="border-radius: 9px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);">
					<div class="card-body text-center">
						<h1>@LOSSRATIO</h1>
						<p>Loss Ratio</p>
					</div>
				</div>
			</div>

			<!-- NET INCOME -->
			<div class="col-xs-4 col-lg-3">
				<div class="card text-white bg-primary mb-3" style="border-radius: 9px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);">
					<div class="card-body text-center">
						<a href="/submitted" class="text-white"><h1>@NETINCOME</h1></a>
						<p>Net Income</p>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

<div class="container mt-2">
	<div class="border p-4" style="background-color: #eaf5e5; border-radius: 9px;">
		<!-- Row for Both Charts -->
		<div class="d-flex justify-content-between" style="gap: 10px;">
			<!-- blazorise Bar Chart -->
			<div class="chart-container" style="width: 48%; background-color: #f9f9f9; border-radius: 9px; padding: 10px;">
				<Chart @ref="barChart" Type="BChart.Bar" TItem="double" Clicked="@OnClicked" style="width: 100%; height: 350px;" />
			</div>

			<!-- Line Chart -->
			<div class="chart-container" style="width: 48%; background-color: #f9f9f9; border-radius: 9px; padding: 10px;">
				<LineChart @ref="lineChart" TItem="double" style="width: 100%; height: 350px;" />
			</div>
		</div>
	</div>
</div>

<div class="container mt-2">
	<div class="border p-3" style="background-color: #eaf5e5; border-radius: 9px;">
		<h4 class="mb-3 text-center"><b>Top Agent</b></h4>
		<div class="table-responsive">
			<table class="table table-bordered text-center" style="table-layout: fixed; width: 100%;">
				<thead style="background-color: #BAD8B6;">
					<tr>
						<th>Name</th>
						<th>Line of Business</th>

					</tr>
				</thead>
				
					<tr>
						<td><span class="badge bg-success">Yna</span></td>
						<td>CGL</td>
					</tr>
					<tr>
						<td><span class="badge bg-success">Trixia</span></td>
						<td>CGL</td>
					</tr>
				
			</table>
		</div>
	</div>
</div>

<div class="container mt-2">
	<div class="border p-3" style="background-color: #eaf5e5; border-radius: 9px;">
		<h4 class="mb-3 text-center"><b>Top Region</b></h4>
		<div class="table-responsive">
			<table class="table table-bordered text-center" style="table-layout: fixed; width: 100%;">
				<thead style="background-color: #BAD8B6;">
					<tr>
						<th>Region</th>
						<th>Province</th>
						<th>Total</th>
					</tr>
				</thead>
				
					<tr>
						<td><span class="badge bg-danger">Region 04A</span></td>
						<td>Batangas</td>
					<td>43743247123</td>
					</tr>
					<tr>
						<td><span class="badge bg-danger">Mimaropa</span></td>
						<td>Mindoro</td>
					<td>24223546235</td>
					</tr>
				
				
			</table>
		</div>
	</div>
</div>


@code {
	// Chart components for Bar and Line charts
	Chart<double> barChart;
	LineChart<double> lineChart;

	// Initialize values for charts
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await HandleRedraw();
		}
	}

	async Task HandleRedraw()
	{
		// Redraw both charts with data
		await barChart.Clear();
		await barChart.AddLabelsDatasetsAndUpdate(Labels, GetBarChartDataset());

		await lineChart.Clear();
		await lineChart.AddLabelsDatasetsAndUpdate(Labels, GetLineChartDataset());
	}

	// Bar Chart dataset
	private BarChartDataset<double> GetBarChartDataset()
	{
		return new()
			{
				Label = "Production",
				Data = GetProductionData(),
				BackgroundColor = backgroundColors,
				BorderColor = borderColors,
				BorderWidth = 1
			};
	}

	// Line Chart dataset
	private LineChartDataset<double> GetLineChartDataset()
	{
		return new LineChartDataset<double>
			{
				Label = "2025 vs. 2024 Total Production",
				Data = GetLineChartData(), // Get production data for the line chart
				BackgroundColor = backgroundColors,
				BorderColor = borderColors,
				Fill = true,
				PointRadius = 3,
				CubicInterpolationMode = "monotone",
			};
	}

	// Labels for the charts (Months from January to October)
	string[] Labels = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct" };

	// Colors for the charts
	List<string> backgroundColors = new List<string>
	{
		ChartColor.FromRgba(255, 99, 132, 0.2f),
		ChartColor.FromRgba(54, 162, 235, 0.2f),
		ChartColor.FromRgba(255, 206, 86, 0.2f),
		ChartColor.FromRgba(75, 192, 192, 0.2f),
		ChartColor.FromRgba(153, 102, 255, 0.2f),
		ChartColor.FromRgba(255, 159, 64, 0.2f)
	};

	List<string> borderColors = new List<string>
	{
		ChartColor.FromRgba(255, 99, 132, 1f),
		ChartColor.FromRgba(54, 162, 235, 1f),
		ChartColor.FromRgba(255, 206, 86, 1f),
		ChartColor.FromRgba(75, 192, 192, 1f),
		ChartColor.FromRgba(153, 102, 255, 1f),
		ChartColor.FromRgba(255, 159, 64, 1f)
	};

	private List<double> GetProductionData()
	{
		var r = new Random();
		return Labels.Select(_ => r.Next(30, 100) * r.NextDouble()).ToList();
	}

	private List<double> GetLineChartData()
	{
		var r = new Random();
		return Labels.Select(_ => r.Next(30, 100) * r.NextDouble()).ToList();
	}

	// Handle bar chart click events
	Task OnClicked(ChartMouseEventArgs e)
	{
		var model = e.Model as BarChartModel;
		Console.WriteLine($"Handling event for {nameof(BarChartModel)}: x:{model.X} y:{model.Y}");
		return Task.CompletedTask;
	}

	// Initialize values
	private int PRODUCTION = 1034000;
	private int CLAIMSPAID = 20000;
	private int LOSSRATIO = 828282;
	private int NETINCOME = 238923;

	//protected override async Task OnInitializedAsync()
	//{
	// Call service to get the production count
	//PRODUCTION = await Cgl_Services.GetProductionMonitoringRowCountAsync();
	//CLAIMSPAID = await Cgl_Services.GetProductionMonitoringRowCountAsync();
	//LOSSRATIO = await Cgl_Services.GetProductionMonitoringRowCountAsync();
}

